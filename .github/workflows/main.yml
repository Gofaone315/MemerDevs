name: 'Kivy App to APK, IPA, and Executables'

# Define the event that triggers the workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-android:
    name: Build for Android
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Buildozer
        uses: actions/cache@v2
        with:
          path: ~/.buildozer
          key: ${{ runner.os }}-buildozer-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      - name: Build with Buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        id: buildozer
        with:
          buildozer_version: stable

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Android App
          path: ${{ steps.buildozer.outputs.filename }}

  build-ios:
    name: Build IPA for iOS
    runs-on: macos-latest  # Use macOS for iOS builds
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Prepare virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          echo "Using Python==$(python --version)"
        shell: bash

      - name: Install system dependencies
        run: |
          brew update
          brew install git autoconf automake libtool pkg-config
          python3 -m pip install --upgrade Cython==0.29.33 buildozer pbxproj setuptools
        shell: bash

      - name: Install Python dependencies
        run: |
          if [ -f requirements.txt ]; then
            python3 -m pip install -r requirements.txt
          fi
        shell: bash

      - name: Build IPA with Buildozer
        run: |
          buildozer ios debug
        shell: bash

      - name: Clean up intermediate build files
        run: |
          buildozer ios clean
        shell: bash

      - name: Compress IPA (Max Compression)
        run: |
          zip -9 -r ios-ipa.zip ./bin/ios/*
        shell: bash

      - name: Upload compressed IPA as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: ios-ipa.zip

  build-executables:
    name: Build Python Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Run on Linux, Windows, and macOS

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install imageio pillow urllib3 requests kivy kivymd pyrebase4 plyer setuptools

      - name: Install Nuitka
        run: python -m pip install nuitka

      - name: Build Executable
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            python -m nuitka --standalone --static-libpython=yes --linux-icon=logo.ico --onefile --output-dir=dist main.py
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            python -m nuitka --windows-company-name="Gofaone Tlalang" --windows-product-name="MemerDevs" --file-version=1.0.0.0 --product-version=1.0.0.0 --output-dir=dist main.py
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            python -m nuitka --standalone --macos-app-icon=logo.ico --static-libpython=yes --onefile --output-dir=dist main.py
          fi
        shell: bash

      - name: Clean up intermediate build files
        run: |
          rm -rf build __pycache__
        shell: bash

      - name: Compress Executables (Max Compression)
        run: |
          zip -9 -r executables-${{ matrix.os }}.zip dist/*
        shell: bash

      - name: Upload OS-specific Executables as artifact
        uses: actions/upload-artifact@v3
        with:
          name: executables-${{ matrix.os }}
          path: executables-${{ matrix.os }}.zip
